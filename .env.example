# =============================================================================
# GHOSTFOLIO APPLICATION ENVIRONMENT CONFIGURATION
# =============================================================================
# This file contains environment variables for the Ghostfolio application.
# 
# SECURITY WARNING:
# - This file contains sensitive information (secrets, API keys, passwords)
# - Never commit this file to version control
# - Set appropriate file permissions (600) to restrict access
# - Generate strong, unique passwords and secrets
#
# USAGE:
# 1. Copy this file from .env.example to .env
# 2. Generate secure random values for all secrets
# 3. Configure values according to your deployment needs
# 4. Ensure file permissions are set correctly: chmod 600 .env
# =============================================================================

# -----------------------------------------------------------------------------
# PROJECT CONFIGURATION
# -----------------------------------------------------------------------------
# Basic project settings and deployment configuration

# Project name - used for container naming and network naming
# Change this if you want to run multiple instances
PROJECT_NAME=ghostfolio

# Base domain/URL for the application
# Used in scripts and documentation - no sensitive information
# Example: folio.example.com, localhost, 192.168.1.100
BASE_DOMAIN=folio.dmla.tech

# Base path for data storage on the host system
# All application data will be stored under this path
# Example: /var/www/folio.example.com, /opt/ghostfolio, /home/user/ghostfolio-data
DATA_BASE_PATH=/var/www/folio.dmla.tech

# External port for accessing the application
# This port will be exposed on the host for reverse proxy access
# Change if port 8061 conflicts with other services
EXTERNAL_PORT=8061

# -----------------------------------------------------------------------------
# VERSION CONFIGURATION
# -----------------------------------------------------------------------------
# Docker image versions - pin these for production stability

# Ghostfolio application version
# Pin to specific version to prevent unexpected updates
# Latest stable version as of deployment
GHOSTFOLIO_VERSION=2.184.0

# PostgreSQL version (major version only, alpine variant will be used)
POSTGRES_VERSION=16

# Redis version (major version only, alpine variant will be used)  
REDIS_VERSION=7

# -----------------------------------------------------------------------------
# DOCKER NETWORK CONFIGURATION
# -----------------------------------------------------------------------------
# Internal Docker network settings

# Docker subnet for internal service communication
# Change if this subnet conflicts with your network
DOCKER_SUBNET=172.20.0.0/16

# Docker network gateway
DOCKER_GATEWAY=172.20.0.1

# -----------------------------------------------------------------------------
# APPLICATION CONFIGURATION
# -----------------------------------------------------------------------------
# Core settings for the Ghostfolio application runtime environment

# Node.js environment mode
# Values: development, production, test
# Use 'production' for live deployment for security and performance optimizations
NODE_ENV=production

# Application host binding
# Set to 0.0.0.0 to allow connections from any IP (required for Docker)
# In production behind reverse proxy, this is safe as nginx controls access
HOST=0.0.0.0

# Application port (internal container port)
# Ghostfolio will listen on this port inside the container
# Docker maps this to host port 8061 for nginx reverse proxy access
PORT=3333

# -----------------------------------------------------------------------------
# SECURITY CONFIGURATION
# -----------------------------------------------------------------------------
# Critical security settings - generate strong random values for production

# Access token salt (CRITICAL SECURITY SETTING)
# Used for generating secure access tokens for user authentication
# Generate: openssl rand -hex 32
# NEVER use the same value across environments
ACCESS_TOKEN_SALT=CHANGE_THIS_TO_RANDOM_64_CHAR_HEX_STRING

# JWT secret key (CRITICAL SECURITY SETTING)  
# Used for signing JSON Web Tokens for user sessions
# Generate: openssl rand -base64 32
# NEVER use the same value across environments
JWT_SECRET_KEY=CHANGE_THIS_TO_RANDOM_JWT_SECRET

# -----------------------------------------------------------------------------
# DATABASE CONFIGURATION
# -----------------------------------------------------------------------------
# PostgreSQL database connection settings

# Database connection URL
# Format: postgresql://username:password@hostname:port/database_name?options
# Uses environment variables from .db.env file for credentials
# The hostname 'postgres' matches the Docker Compose service name
DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=prefer

# -----------------------------------------------------------------------------
# REDIS CACHE CONFIGURATION
# -----------------------------------------------------------------------------
# Redis connection settings for session storage and caching

# Redis server hostname (Docker Compose service name)
REDIS_HOST=redis

# Redis server port (standard Redis port)
REDIS_PORT=6379

# Redis database index (0 is default, can use 0-15 for separation)
REDIS_DB=0

# Redis password authentication (references .db.env variable)
# This will be substituted with the actual password from .db.env
REDIS_PASSWORD=${REDIS_PASSWORD}

# -----------------------------------------------------------------------------
# LOGGING CONFIGURATION
# -----------------------------------------------------------------------------
# Application logging settings for monitoring and debugging

# Log levels to include in application logs
# Available levels: error, warn, log, debug, verbose
# For production, include: error, warn, log
# Add 'debug' and 'verbose' only for troubleshooting (increases log volume)
LOG_LEVELS=["error","warn","log"]

# -----------------------------------------------------------------------------
# PERFORMANCE CONFIGURATION
# -----------------------------------------------------------------------------
# Settings to optimize application performance

# Network request timeout to external data providers (milliseconds)
# Timeout for fetching stock prices, exchange rates, etc.
# Lower values improve responsiveness but may cause failures with slow APIs
# Recommended: 2000-5000ms depending on network reliability
REQUEST_TIMEOUT=3000

# -----------------------------------------------------------------------------
# EXTERNAL API CONFIGURATION (OPTIONAL)
# -----------------------------------------------------------------------------
# API keys for enhanced market data features
# These are optional but provide better data coverage and rate limits

# CoinGecko API keys for cryptocurrency data
# Free tier: limited requests per minute
# Pro tier: higher rate limits and priority support
# Leave empty to use free anonymous access (with rate limits)
API_KEY_COINGECKO_DEMO=
API_KEY_COINGECKO_PRO=

# Yahoo Finance API configuration
# Yahoo Finance is used for stock and ETF data
# No API key required - uses web scraping with rate limiting
# Configure request timeout above if experiencing slow responses

# -----------------------------------------------------------------------------
# FEATURE FLAGS (OPTIONAL)
# -----------------------------------------------------------------------------
# Enable or disable specific application features

# Enable market mood indicators (Fear & Greed Index)
# Shows market sentiment data on dashboard
# Values: true, false
ENABLE_MARKET_MOOD=true

# Enable experimental features
# May include beta functionality not ready for production
# Values: true, false (recommended: false for production)
ENABLE_EXPERIMENTAL_FEATURES=false

# -----------------------------------------------------------------------------
# DEVELOPMENT OVERRIDES (REMOVE IN PRODUCTION)
# -----------------------------------------------------------------------------
# These settings should only be used in development environments
# Remove or comment out for production deployments

# Development mode - enables debug features and relaxed security
# NEVER set to true in production
# DEV_MODE=false

# Debug logging - enables verbose debugging information
# Only enable for troubleshooting specific issues
# DEBUG_LOGGING=false

# Disable authentication - allows access without login
# EXTREMELY DANGEROUS - never use in production
# DISABLE_AUTH=false

# -----------------------------------------------------------------------------
# BACKUP AND MAINTENANCE
# -----------------------------------------------------------------------------
# Settings related to backup and maintenance operations

# Data export encryption
# Enable encryption for data exports (recommended for sensitive data)
ENABLE_EXPORT_ENCRYPTION=true

# Automatic backup configuration (if backup scripts are implemented)
# BACKUP_ENABLED=true
# BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
# BACKUP_RETENTION_DAYS=30

# -----------------------------------------------------------------------------
# NOTES FOR DEPLOYMENT
# -----------------------------------------------------------------------------
# 1. Generate all secrets using cryptographically secure methods:
#    - ACCESS_TOKEN_SALT: openssl rand -hex 32
#    - JWT_SECRET_KEY: openssl rand -base64 32
#
# 2. Database credentials are stored in .db.env file for security separation
#
# 3. File permissions should be restrictive:
#    chmod 600 .env .db.env
#
# 4. For production deployment:
#    - Use strong passwords for all services
#    - Enable SSL/TLS for external connections (nginx configuration)
#    - Implement regular backup procedures
#    - Monitor logs for security issues
#    - Keep application and dependencies updated
#
# 5. Environment variable substitution:
#    Variables marked with ${VARIABLE_NAME} will be substituted from .db.env
#    This allows sharing database credentials between services
# =============================================================================
