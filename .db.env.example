# =============================================================================
# DATABASE ENVIRONMENT CONFIGURATION
# =============================================================================
# This file contains database-specific environment variables for PostgreSQL
# and Redis services used by Ghostfolio.
#
# SECURITY WARNING:
# - This file contains sensitive database credentials
# - Never commit this file to version control
# - Set appropriate file permissions (600) to restrict access
# - Use strong, unique passwords for all database accounts
#
# USAGE:
# 1. Copy this file from .db.env.example to .db.env
# 2. Generate strong, secure passwords for all database accounts
# 3. Ensure file permissions are set correctly: chmod 600 .db.env
# =============================================================================

# -----------------------------------------------------------------------------
# POSTGRESQL DATABASE CONFIGURATION
# -----------------------------------------------------------------------------
# Credentials and settings for the PostgreSQL database service

# PostgreSQL superuser username
# This user will have full administrative privileges on the database
# Use a descriptive name but avoid 'admin' or 'root' for security
POSTGRES_USER=ghostfolio_user

# PostgreSQL user password (CRITICAL SECURITY SETTING)
# Generate a strong password with mixed case, numbers, and special characters
# Minimum 20 characters recommended for production
# Generate: openssl rand -base64 24
POSTGRES_PASSWORD=CHANGE_THIS_TO_STRONG_DB_PASSWORD

# PostgreSQL database name
# Database dedicated to Ghostfolio application data
# Will be created automatically on first startup
POSTGRES_DB=ghostfolio_db

# -----------------------------------------------------------------------------
# REDIS CACHE CONFIGURATION
# -----------------------------------------------------------------------------
# Authentication and settings for the Redis cache service

# Redis authentication password (CRITICAL SECURITY SETTING)
# Used to secure Redis instance from unauthorized access
# Generate a strong password different from PostgreSQL
# Generate: openssl rand -base64 20
REDIS_PASSWORD=CHANGE_THIS_TO_STRONG_REDIS_PASSWORD

# -----------------------------------------------------------------------------
# SECURITY NOTES
# -----------------------------------------------------------------------------
# 1. Password Requirements:
#    - Minimum 20 characters for database passwords
#    - Use combination of uppercase, lowercase, numbers, special characters
#    - Avoid dictionary words, personal information, or common patterns
#    - Each service should have a unique password
#
# 2. Password Generation Examples:
#    - PostgreSQL: openssl rand -base64 24
#    - Redis: openssl rand -base64 20
#    - Alternative: pwgen -s 24 1
#
# 3. File Security:
#    - Set restrictive permissions: chmod 600 .db.env
#    - Store backup copies securely (encrypted)
#    - Rotate passwords periodically (quarterly recommended)
#
# 4. Access Control:
#    - Database access is restricted to Docker network
#    - No external ports exposed for database services
#    - Redis requires password authentication
#    - PostgreSQL uses password authentication with modern encryption
#
# 5. Monitoring:
#    - Monitor database logs for unauthorized access attempts
#    - Implement log rotation to manage log file sizes
#    - Set up alerts for failed authentication attempts
# =============================================================================

# -----------------------------------------------------------------------------
# PRODUCTION DEPLOYMENT CHECKLIST
# -----------------------------------------------------------------------------
# Before deploying to production, ensure:
# 
# [ ] Strong passwords generated for all services
# [ ] File permissions set to 600 (chmod 600 .db.env)
# [ ] Passwords are unique and not reused from other systems
# [ ] Backup procedures established for password recovery
# [ ] Environment variables tested with Docker Compose
# [ ] Database initialization verified on first startup
# [ ] Network connectivity tested between services
# [ ] Log files are being created and rotated properly
# [ ] Health checks are passing for all database services
# =============================================================================
